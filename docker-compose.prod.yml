version: '3.9'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-chat_service}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-chat_service}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__MAX_REQUEST_SIZE_MB: 32
      QDRANT__SERVICE__MAX_WORKERS: 4
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend:
    build: .
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-chat_service}
      SECRET_KEY: ${SECRET_KEY:-changeme}
      YANDEX_GPT_API_KEY: ${YANDEX_GPT_API_KEY:-}
      YANDEX_GPT_FOLDER_ID: ${YANDEX_GPT_FOLDER_ID:-}
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: ${QDRANT_COLLECTION:-vacancies_tasks}
      ENABLE_VACANCY_RECOMMENDATIONS: ${ENABLE_VACANCY_RECOMMENDATIONS:-false}
      APP_ENV: production
      PYTHONPATH: /app
    volumes:
      # Mount source data file for embeddings generation
      - ./scored_vacs.pickle:/app/scored_vacs.pickle:ro
      # Mount embeddings files if they exist
      - ./vacancies_with_embeddings.pickle:/app/vacancies_with_embeddings.pickle
      - ./vacancies_with_embeddings_test.pickle:/app/vacancies_with_embeddings_test.pickle
      # Mount directory for output files (for scripts)
      - ./:/app/output
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    depends_on:
      - backend
    ports:
      - "80:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
  generate-embeddings:
    build: .
    depends_on:
      qdrant:
        condition: service_started
    environment:
      YANDEX_GPT_API_KEY: ${YANDEX_GPT_API_KEY:-}
      YANDEX_GPT_FOLDER_ID: ${YANDEX_GPT_FOLDER_ID:-}
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: ${QDRANT_COLLECTION:-vacancies_tasks}
      PYTHONPATH: /app
      AUTO_CONFIRM: "true"  # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è Docker
    volumes:
      - ./:/app
    working_dir: /app
    command: python scripts/generate_embeddings.py
    profiles: ["embeddings"]

  # –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ Qdrant
  load-to-qdrant:
    build: .
    depends_on:
      qdrant:
        condition: service_started
    environment:
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: ${QDRANT_COLLECTION:-vacancies_tasks}
      PYTHONPATH: /app
    volumes:
      - ./:/app
    working_dir: /app
    command: python scripts/load_to_qdrant.py
    profiles: ["embeddings"]

  # –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
  embeddings-pipeline:
    build: .
    depends_on:
      qdrant:
        condition: service_started
    environment:
      YANDEX_GPT_API_KEY: ${YANDEX_GPT_API_KEY:-}
      YANDEX_GPT_FOLDER_ID: ${YANDEX_GPT_FOLDER_ID:-}
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: ${QDRANT_COLLECTION:-vacancies_tasks}
      PYTHONPATH: /app
      AUTO_CONFIRM: "true"
    volumes:
      - ./:/app
    working_dir: /app
    command: >
      sh -c "
      echo 'üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤' &&
      python scripts/generate_embeddings.py &&
      echo '‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Qdrant...' &&
      python scripts/load_to_qdrant.py &&
      echo 'üéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!'
      "
    profiles: ["embeddings"]

volumes:
  postgres_data:
  qdrant_data:

networks:
  default:
    name: career_coach_network
