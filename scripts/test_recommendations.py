#!/usr/bin/env python3
"""
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —á–∞—Ç–æ–º.
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.services.recommendations.embeddings_service import EmbeddingsService
from app.services.recommendations.qdrant_service import QdrantService, VacancyRecommendation


async def test_embeddings_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê –≠–ú–ë–ï–î–î–ò–ù–ì–û–í")
    print("="*70)
    
    service = EmbeddingsService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —á–∞—Ç–µ
    test_activities = [
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û",
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
        "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ / AI, –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ / Data Science",
        "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ DevOps, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º"
    ]
    
    for i, activity in enumerate(test_activities, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {activity}")
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
        token_count = service.count_tokens(activity)
        print(f"   –¢–æ–∫–µ–Ω–æ–≤: {token_count}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        embedding = await service.create_embedding(activity)
        
        if embedding is not None:
            print(f"   ‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: {embedding.shape}")
            print(f"   üìä Min: {embedding.min():.4f}, Max: {embedding.max():.4f}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
    
    return True


async def test_qdrant_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å Qdrant."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê QDRANT")
    print("="*70)
    
    service = QdrantService()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not service.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Qdrant")
        return False
    
    if not service.check_collection():
        print("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è vacancies_tasks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∏—Å–∫–∏
    embeddings_service = EmbeddingsService()
    
    test_cases = [
        {
            "specialization": "–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "activities": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        },
        {
            "specialization": "–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", 
            "activities": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, UX/UI –¥–∏–∑–∞–π–Ω"
        },
        {
            "specialization": "ML-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "activities": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ / AI, –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ / Data Science"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ {i}:")
        print(f"   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {case['specialization']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {case['activities']}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        embedding = await embeddings_service.create_embedding(case['activities'])
        if embedding is None:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥")
            continue
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        recommendations = await service.search_similar_vacancies(
            embedding=embedding,
            target_specialization=case['specialization'],
            limit=5
        )
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for j, rec in enumerate(recommendations[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            print(f"      {j}. {rec.title}")
            print(f"         üè¢ {rec.company}")
            print(f"         üÜî HH ID: {rec.hh_id}")
            print(f"         üìä Score: {rec.score:.3f}")
            print(f"         üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec.category}")
    
    return True


async def test_full_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û PIPELINE")
    print("="*70)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —á–∞—Ç-—Å–µ—Å—Å–∏–∏
    mock_session_data = {
        "current_position": "–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "years_in_position": "3",
        "key_projects": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª REST API –Ω–∞ FastAPI",
        "target_specialization": "–§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "preferred_activities": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        "position_ambitions": "Senior Developer",
        "salary_expectations": "180000",
        "current_skills": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "tools_experience": "Python",
        "soft_skills": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
        "education": "–í–£–ó",
        "learning_goals": "React, TypeScript"
    }
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:")
    for key, value in mock_session_data.items():
        print(f"   {key}: {value}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    target_specialization = mock_session_data['target_specialization']
    preferred_activities = mock_session_data['preferred_activities']
    
    print(f"\nüéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    print(f"   –¶–µ–ª–µ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {target_specialization}")
    print(f"   –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {preferred_activities}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    embeddings_service = EmbeddingsService()
    qdrant_service = QdrantService()
    
    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
    print(f"\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...")
    embedding = await embeddings_service.create_embedding(preferred_activities)
    if embedding is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥")
        return False
    
    print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: {embedding.shape}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    print(f"\nüîç –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    recommendations = await qdrant_service.search_similar_vacancies(
        embedding=embedding,
        target_specialization=target_specialization,
        limit=5
    )
    
    if not recommendations:
        print("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –¥–ª—è —á–∞—Ç–∞
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(recommendations)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π:")
    
    for i, rec in enumerate(recommendations, 1):
        print(f"\n{i}. {rec.title}")
        print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {rec.company}")
        print(f"   üÜî HH ID: {rec.hh_id}")
        print(f"   üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {rec.score:.1%}")
        print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec.category}")
        if rec.url:
            print(f"   üîó –°—Å—ã–ª–∫–∞: {rec.url}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ hh_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
    hh_ids = [rec.hh_id for rec in recommendations]
    print(f"\nüìã HH IDs –¥–ª—è —á–∞—Ç–∞: {hh_ids}")
    
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("="*70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export OPENAI_API_KEY='your-key-here'")
        return
    
    try:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        success = True
        
        success &= await test_embeddings_service()
        success &= await test_qdrant_service() 
        success &= await test_full_pipeline()
        
        if success:
            print("\n" + "="*70)
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            print("="*70)
        else:
            print("\n" + "="*70)
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
            print("="*70)
            
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
