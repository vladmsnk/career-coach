#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å mock –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ OpenAI API –∫–ª—é—á–∞.
"""
import asyncio
import sys
import numpy as np
from pathlib import Path
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.services.recommendations.qdrant_service import QdrantService, VacancyRecommendation


class MockEmbeddingsService:
    """Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –±–µ–∑ OpenAI API."""
    
    def __init__(self, dimensions: int = 768):
        self.dimensions = dimensions
    
    async def create_embedding(self, text: str) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç mock —ç–º–±–µ–¥–¥–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞."""
        if not text or not text.strip():
            return None
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
        hash_val = hash(text)
        np.random.seed(abs(hash_val) % 2**31)  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        embedding = np.random.normal(0, 1, self.dimensions).astype(np.float32)
        norm = np.linalg.norm(embedding) + 1e-12
        
        print(f"ü§ñ Mock —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è: '{text[:50]}...'")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {embedding.shape}")
        
        return embedding / norm


async def test_mock_embeddings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç mock —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MOCK –≠–ú–ë–ï–î–î–ò–ù–ì–û–í")
    print("="*70)
    
    service = MockEmbeddingsService()
    
    test_activities = [
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û",
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
        "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ / AI, –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ / Data Science"
    ]
    
    for i, activity in enumerate(test_activities, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {activity}")
        
        embedding = await service.create_embedding(activity)
        if embedding is not None:
            print(f"   ‚úÖ Mock —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: {embedding.shape}")
            print(f"   üìä Min: {embedding.min():.4f}, Max: {embedding.max():.4f}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
    
    return True


async def test_qdrant_connection_only():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant –±–µ–∑ –ø–æ–∏—Å–∫–∞."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö QDRANT")
    print("="*70)
    
    service = QdrantService()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not service.test_connection():
        print("‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. docker-compose up -d")
        print("   2. http://localhost:6333/health")
        return False
    
    if not service.check_collection():
        print("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è vacancies_tasks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/load_vacancies_to_qdrant.py")
        return False
    
    print("‚úÖ Qdrant –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    return True


async def test_specialization_mapping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–ü–ü–ò–ù–ì–ê –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ô")  
    print("="*70)
    
    service = QdrantService()
    
    test_specializations = [
        "–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "ML-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "DevOps-–∏–Ω–∂–µ–Ω–µ—Ä"
    ]
    
    for spec in test_specializations:
        categories = service._get_filter_categories(spec)
        print(f"üìã {spec} ‚Üí {categories}")
    
    return True


async def test_architecture_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    print("\n" + "="*70)
    print("üèóÔ∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –°–ò–°–¢–ï–ú–´")
    print("="*70)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç-—Å–µ—Å—Å–∏–∏
    mock_session_data = {
        "target_specialization": "–§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "preferred_activities": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    }
    
    print("üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞:")
    for key, value in mock_session_data.items():
        print(f"   {key}: {value}")
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    print("\nü§ñ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
    embeddings_service = MockEmbeddingsService()
    embedding = await embeddings_service.create_embedding(
        mock_session_data["preferred_activities"]
    )
    
    if embedding is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥")
        return False
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
    print("\nüîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant")
    qdrant_service = QdrantService()
    
    if not qdrant_service.test_connection():
        print("‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
        print("üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Qdrant –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return True
    
    if not qdrant_service.check_collection():
        print("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫")
        print("üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π")
        return True
    
    # –®–∞–≥ 3: –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–µ—Å–ª–∏ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω)
    print("\nüîé –®–∞–≥ 3: –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    try:
        recommendations = await qdrant_service.search_similar_vacancies(
            embedding=embedding,
            target_specialization=mock_session_data["target_specialization"],
            limit=5
        )
        
        if recommendations:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
            for i, rec in enumerate(recommendations[:3], 1):
                print(f"   {i}. {rec.title} | {rec.company} | HH:{rec.hh_id}")
        else:
            print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        print("üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –°–ò–°–¢–ï–ú–´ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("="*70)
    
    try:
        success = True
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        success &= await test_mock_embeddings()
        success &= await test_qdrant_connection_only()
        success &= await test_specialization_mapping()
        success &= await test_architecture_demo()
        
        print("\n" + "="*70)
        if success:
            print("üéâ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("\nüéØ –î–õ–Ø –ü–û–õ–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ù–£–ñ–ù–û:")
            print("1. –†–µ–∞–ª—å–Ω—ã–π OpenAI API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
            print("2. –ó–∞–ø—É—â–µ–Ω–Ω—ã–π Qdrant: docker-compose up -d")
            print("3. –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: python scripts/load_vacancies_to_qdrant.py")
        else:
            print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ê–†–•–ò–¢–ï–ö–¢–£–†–ï")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        print("="*70)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
