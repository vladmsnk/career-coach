"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
"""
import asyncio
import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/..'))

from app.services.vacancies.vacancy_service import vacancy_service
from app.services.chat.career_consultation_service import CareerConsultationService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_vacancy_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ —Ä–∞–±–æ—Ç—É —Å CSV –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
    print("\nüß™ –¢–ï–°–¢ VACANCY SERVICE")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    vacancy_service.load_vacancies()
    total_count = vacancy_service.get_total_count()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_count}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ ID (–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Qdrant –ø–æ–∏—Å–∫–∞)
    test_ids = ['124928483', '124919596', '124963529', '121091720', '124778414']
    print(f"\nüîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ ID: {test_ids}")
    
    vacancies = vacancy_service.get_vacancies_by_ids(test_ids)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
    
    for vacancy in vacancies[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
        print(f"\nüìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.id}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy.title}")
        print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.job_description[:200]}...")
    
    return vacancies

async def test_career_consultation_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∫–∞—Ä—å–µ—Ä–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢ CAREER CONSULTATION SERVICE")
    print("=" * 40)
    
    try:
        consultation_service = CareerConsultationService()
        print("‚úÖ CareerConsultationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'current_position': '–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'years_in_position': '3',
            'key_projects': '–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –Ω–∞ Python –∏ FastAPI',
            'target_specialization': '–§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'preferred_activities': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
            'position_ambitions': 'Senior Developer',
            'salary_expectations': '200000',
            'current_skills': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö',
            'tools_experience': 'Python, PostgreSQL, Docker',
            'soft_skills': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –¢–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
            'education': '–í–£–ó –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ',
            'learning_goals': '–ò–∑—É—á–µ–Ω–∏–µ React, TypeScript'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies = await test_vacancy_service()
        
        print(f"\nü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT...")
        consultation = await consultation_service.get_career_consultation(
            user_data=user_data,
            vacancies=vacancies[:3]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–∞–∫–∞–Ω—Å–∏–∏
        )
        
        print(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (–¥–ª–∏–Ω–∞: {len(consultation)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"\nüìù –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø:")
        print("-" * 60)
        print(consultation)
        print("-" * 60)
        
        return consultation
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CareerConsultationService: {e}")
        import traceback
        traceback.print_exc()
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–†–¨–ï–†–ù–û–ô –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export OPENAI_API_KEY='your-key'")
        return
    
    print(f"‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞
    csv_path = "vacancies_sample.csv"
    if not os.path.exists(csv_path):
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return
    
    print(f"‚úÖ CSV —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {csv_path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        await test_career_consultation_service()
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())

