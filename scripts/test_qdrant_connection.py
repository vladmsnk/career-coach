#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/test_qdrant_connection.py
"""
import asyncio
import sys
from pathlib import Path

try:
    from qdrant_client import QdrantClient
    from qdrant_client.http.models import VectorParams, Distance, PointStruct
    import numpy as np
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install qdrant-client numpy")
    sys.exit(1)

QDRANT_URL = "http://localhost:6333"
TEST_COLLECTION = "test_connection"

def test_qdrant_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant")
    print("=" * 50)
    
    # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {QDRANT_URL}...")
    try:
        client = QdrantClient(url=QDRANT_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Qdrant –∑–∞–ø—É—â–µ–Ω: docker-compose up -d qdrant")
        return False
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    try:
        collections = client.get_collections()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections.collections)}")
        
        if collections.collections:
            print("   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
            for coll in collections.collections:
                try:
                    count = client.count(coll.name).count
                    print(f"     ‚Ä¢ {coll.name}: {count:,} —Ç–æ—á–µ–∫")
                except:
                    print(f"     ‚Ä¢ {coll.name}: (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e}")
        return False
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    print(f"\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{TEST_COLLECTION}'...")
    try:
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            client.delete_collection(TEST_COLLECTION)
            print("   –°—Ç–∞—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        client.create_collection(
            collection_name=TEST_COLLECTION,
            vectors_config={
                "default": VectorParams(size=128, distance=Distance.COSINE)
            }
        )
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        return False
    
    # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫...")
    try:
        test_points = [
            PointStruct(
                id=i,
                vector={"default": np.random.random(128).tolist()},
                payload={
                    "title": f"Test Vacancy {i}",
                    "company": f"Company {i}",
                    "category": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫" if i % 2 == 0 else "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
                }
            )
            for i in range(1, 11)  # 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫
        ]
        
        result = client.upsert(
            collection_name=TEST_COLLECTION,
            points=test_points
        )
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_points)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        count = client.count(TEST_COLLECTION).count
        print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {count} —Ç–æ—á–µ–∫")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    try:
        query_vector = np.random.random(128).tolist()
        results = client.search(
            collection_name=TEST_COLLECTION,
            query_vector=("default", query_vector),
            limit=3,
            with_payload=True
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(results, 1):
            payload = result.payload or {}
            print(f"   {i}. {payload.get('title')} | Score: {result.score:.3f}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    print("\nüîé –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...")
    try:
        from qdrant_client.http.models import Filter, FieldCondition, MatchValue
        
        filtered_results = client.search(
            collection_name=TEST_COLLECTION,
            query_vector=("default", query_vector),
            query_filter=Filter(
                must=[
                    FieldCondition(
                        key="category", 
                        match=MatchValue(value="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
                    )
                ]
            ),
            limit=5,
            with_payload=True
        )
        
        print(f"‚úÖ –° —Ñ–∏–ª—å—Ç—Ä–æ–º 'category=–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' –Ω–∞–π–¥–µ–Ω–æ: {len(filtered_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(filtered_results, 1):
            payload = result.payload or {}
            print(f"   {i}. {payload.get('title')} | {payload.get('category')} | Score: {result.score:.3f}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        return False
    
    # 7. –û—á–∏—Å—Ç–∫–∞
    print(f"\nüßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
    try:
        client.delete_collection(TEST_COLLECTION)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é: {e}")
    
    # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if "vacancies_tasks" in [coll.name for coll in collections.collections]:
        try:
            main_count = client.count("vacancies_tasks").count
            print(f"\nüìä –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è 'vacancies_tasks': {main_count:,} –≤–∞–∫–∞–Ω—Å–∏–π")
        except:
            print(f"\n‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è 'vacancies_tasks' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    
    print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print(f"üåê Qdrant Dashboard: http://localhost:6333/dashboard")
    return True

if __name__ == "__main__":
    success = test_qdrant_connection()
    sys.exit(0 if success else 1)
