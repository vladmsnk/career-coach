#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º —á–∞—Ç–æ–º.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
"""
import asyncio
import sys
import os
import uuid
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.core.settings import settings
from app.services.recommendations.recommendation_service import RecommendationService


class MockChatRepository:
    """Mock —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î."""
    
    def __init__(self):
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏
        self.mock_session_data = {
            "current_position": "–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "years_in_position": "3", 
            "key_projects": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª API –Ω–∞ FastAPI",
            "target_specialization": "–§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "preferred_activities": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û, –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "position_ambitions": "Senior Developer",
            "salary_expectations": "180000",
            "current_skills": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "tools_experience": "Python",
            "soft_skills": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
            "education": "–í–£–ó",
            "learning_goals": "React, TypeScript"
        }
    
    async def get_session(self, session_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏."""
        class MockSession:
            def __init__(self, collected_data):
                self.collected_data = collected_data
        
        return MockSession(self.mock_session_data)


async def test_recommendation_service_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –°–ï–†–í–ò–°–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("="*70)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    mock_repo = MockChatRepository()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendation_service = RecommendationService(mock_repo)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    services_ok = await recommendation_service.test_services()
    
    if not services_ok:
        print("‚ùå –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   1. Qdrant –∑–∞–ø—É—â–µ–Ω: docker-compose up -d")
        print("   2. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: python scripts/load_vacancies_to_qdrant.py")
        print("   3. OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    test_session_id = str(uuid.uuid4())
    
    recommendations = await recommendation_service.get_recommendations_for_session(test_session_id)
    
    if not recommendations:
        print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è mock –¥–∞–Ω–Ω—ã—Ö)")
        return True
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    for i, rec in enumerate(recommendations, 1):
        print(f"   {i}. {rec.title}")
        print(f"      üè¢ {rec.company}")
        print(f"      üÜî HH ID: {rec.hh_id}")
        print(f"      üìä Score: {rec.score:.3f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞
    hh_ids = [rec.hh_id for rec in recommendations]
    print(f"\nüìã HH IDs –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ: {hh_ids}")
    
    return True


async def test_feature_flag():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É feature flag."""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FEATURE FLAG")
    print("="*70)
    
    print(f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   enable_vacancy_recommendations: {settings.enable_vacancy_recommendations}")
    print(f"   qdrant_url: {settings.qdrant_url}")
    print(f"   qdrant_collection: {settings.qdrant_collection}")
    print(f"   openai_api_key: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.openai_api_key else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if settings.enable_vacancy_recommendations:
        print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –í–ö–õ–Æ–ß–ï–ù–´ - –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —á–∞—Ç")
    else:
        print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –í–´–ö–õ–Æ–ß–ï–ù–´ - —á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ")
        print("   –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ENABLE_VACANCY_RECOMMENDATIONS=true")
    
    return True


async def test_chat_integration_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —á–∞—Ç–æ–º."""
    print("\n" + "="*70) 
    print("üß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ß–ê–¢–û–ú")
    print("="*70)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏
    session_id = str(uuid.uuid4())
    print(f"üìù –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {session_id}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É feature flag
    if not settings.enable_vacancy_recommendations:
        print("‚ö†Ô∏è Feature flag –≤—ã–∫–ª—é—á–µ–Ω - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–∫–∞–∫ –æ–±—ã—á–Ω–æ)")
        return True
    
    print("üéØ Feature flag –≤–∫–ª—é—á–µ–Ω - –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    mock_repo = MockChatRepository()
    service = RecommendationService(mock_repo)
    
    try:
        recommendations = await service.get_recommendations_for_session(session_id)
        
        if recommendations:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç
            chat_message = {
                "event": "recommendations",
                "message": f"üéØ –ù–∞—à–ª–∏ {len(recommendations)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –≤–∞—Å:",
                "data": {
                    "recommendations": [
                        {
                            "hh_id": rec.hh_id,
                            "title": rec.title,
                            "company": rec.company,
                            "score": round(rec.score * 100, 1),
                            "url": rec.url,
                            "category": rec.category
                        }
                        for rec in recommendations
                    ],
                    "hh_ids": [rec.hh_id for rec in recommendations]
                }
            }
            
            print("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞:")
            print(f"   {chat_message['message']}")
            print(f"   HH IDs: {chat_message['data']['hh_ids']}")
            print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç")
        else:
            print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        print("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
        print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞)")
    
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("="*70)
    
    try:
        success = True
        
        success &= await test_feature_flag()
        success &= await test_recommendation_service_integration() 
        success &= await test_chat_integration_simulation()
        
        print("\n" + "="*70)
        if success:
            print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            
            if settings.enable_vacancy_recommendations:
                print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –í–ö–õ–Æ–ß–ï–ù–´:")
                print("   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–æ–Ω—Ü–µ —á–∞—Ç–∞")
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
                print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            else:
                print("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –í–´–ö–õ–Æ–ß–ï–ù–´:")
                print("   ‚Ä¢ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                print("   ‚Ä¢ –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è: export ENABLE_VACANCY_RECOMMENDATIONS=true")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        print("="*70)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
