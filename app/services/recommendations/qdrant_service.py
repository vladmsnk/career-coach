"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Qdrant –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""
from typing import List, Dict, Any, Optional
import numpy as np
from dataclasses import dataclass
from qdrant_client import QdrantClient
from qdrant_client.http.models import Filter, FieldCondition, MatchValue


@dataclass
class VacancyRecommendation:
    """–ú–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    hh_id: str
    title: str
    company: str
    score: float
    url: Optional[str] = None
    category: Optional[str] = None


class QdrantService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
    
    def __init__(self, url: str = "http://localhost:6333", collection_name: str = "vacancies_tasks"):
        self.url = url
        self.collection_name = collection_name
        self.client = QdrantClient(url=url)
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant."""
        try:
            collections = self.client.get_collections()
            print(f"‚úÖ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω. –ö–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections.collections)}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
            return False
    
    def check_collection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
        try:
            info = self.client.get_collection(self.collection_name)
            count = self.client.count(self.collection_name).count
            print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {self.collection_name} –Ω–∞–π–¥–µ–Ω–∞. –í–µ–∫—Ç–æ—Ä–æ–≤: {count}")
            return True
        except Exception as e:
            print(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è {self.collection_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            return False
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –∏–∑ —á–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ Qdrant
    SPECIALIZATION_MAPPING = {
        "–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": ["–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        "–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": ["–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        "–§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": ["–ë—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–§—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        "ML-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": ["ML-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "Machine Learning Engineer"],
        "Machine Learning Engineer": ["Machine Learning Engineer", "ML-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        "Data Engineer": ["Data Engineer", "–ò–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö"],
        "Data Scientist": ["Data Scientist"],
        "AI Engineer": ["AI Engineer", "ML-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        "DevOps-–∏–Ω–∂–µ–Ω–µ—Ä": ["DevOps-–∏–Ω–∂–µ–Ω–µ—Ä"],
        "iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": ["iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        "Android-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": ["Android-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"],
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π": ["iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "Android-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"],
        "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫": ["–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "QA Engineer"],
        "QA Engineer": ["QA Engineer", "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"],
        "Test Automation Engineer": ["Test Automation Engineer", "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"],
        "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": ["–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"],
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä": ["Tech Lead", "Team Lead", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä"],
        "Tech Lead": ["Tech Lead", "Team Lead"],
        "Team Lead": ["Team Lead", "Tech Lead"],
        "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û": ["Solution Architect", "Enterprise Architect", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û"],
        "Solution Architect": ["Solution Architect", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û"],
        "Enterprise Architect": ["Enterprise Architect", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û"],
        "–ü—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä": ["–ü—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"],
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä": ["Engineering Manager", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"],
        "Engineering Manager": ["Engineering Manager", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"],
        "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫": ["–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫"],
        "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫": ["–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫"],
        "UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä": ["UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä", "Product Designer"],
        "Product Designer": ["Product Designer", "UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä"]
    }
    
    def _get_filter_categories(self, target_specialization: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        return self.SPECIALIZATION_MAPPING.get(
            target_specialization, 
            [target_specialization]  # Fallback –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        )
    
    async def search_similar_vacancies(
        self, 
        embedding: np.ndarray, 
        target_specialization: str,
        limit: int = 5
    ) -> List[VacancyRecommendation]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥—É.
        
        Args:
            embedding: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            target_specialization: –¶–µ–ª–µ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            filter_categories = self._get_filter_categories(target_specialization)
            
            print(f"üîç –ü–æ–∏—Å–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {target_specialization}")
            print(f"üìã –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {filter_categories}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            filter_condition = Filter(
                should=[
                    FieldCondition(
                        key="raw_category",
                        match=MatchValue(value=category)
                    )
                    for category in filter_categories
                ]
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            search_results = self.client.search(
                collection_name=self.collection_name,
                query_vector=("tasks", embedding.tolist()),
                query_filter=filter_condition,
                limit=limit,
                with_payload=True
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            recommendations = []
            for result in search_results:
                payload = result.payload or {}
                
                hh_id = payload.get('hh_id', 'unknown')
                title = payload.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                company = payload.get('company', '–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏')
                url = payload.get('url')
                category = payload.get('raw_category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                
                recommendation = VacancyRecommendation(
                    hh_id=str(hh_id),
                    title=title,
                    company=company,
                    score=result.score,
                    url=url,
                    category=category
                )
                recommendations.append(recommendation)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return recommendations
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Qdrant: {e}")
            return []
    
    async def search_test_query(self, query: str, embedding: np.ndarray) -> List[VacancyRecommendation]:
        """–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        try:
            search_results = self.client.search(
                collection_name=self.collection_name,
                query_vector=("tasks", embedding.tolist()),
                limit=3,
                with_payload=True
            )
            
            recommendations = []
            for result in search_results:
                payload = result.payload or {}
                recommendation = VacancyRecommendation(
                    hh_id=str(payload.get('hh_id', 'unknown')),
                    title=payload.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    company=payload.get('company', '–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏'),
                    score=result.score,
                    url=payload.get('url'),
                    category=payload.get('raw_category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                )
                recommendations.append(recommendation)
            
            return recommendations
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return []
