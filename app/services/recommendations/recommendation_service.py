"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π.
"""
from typing import List, Optional, Dict, Any
from uuid import UUID

from app.services.recommendations.embeddings_service import EmbeddingsService
from app.services.recommendations.qdrant_service import QdrantService, VacancyRecommendation
from app.domain.chat.repositories import ChatRepository


class RecommendationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤–∞–∫–∞–Ω—Å–∏–π."""
    
    def __init__(self, chat_repo: ChatRepository):
        self.chat_repo = chat_repo
        self.embeddings_service = EmbeddingsService()
        self.qdrant_service = QdrantService()
    
    async def get_recommendations_for_session(self, session_id: UUID) -> List[VacancyRecommendation]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —á–∞—Ç-—Å–µ—Å—Å–∏–∏.
        
        Args:
            session_id: ID —á–∞—Ç-—Å–µ—Å—Å–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = await self._get_session_data(session_id)
            if not session_data:
                print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            target_specialization = session_data.get('target_specialization')
            preferred_activities = session_data.get('preferred_activities')
            
            if not target_specialization:
                print("‚ö†Ô∏è target_specialization –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏")
                return []
            
            if not preferred_activities:
                print("‚ö†Ô∏è preferred_activities –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏")
                return []
            
            print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
            print(f"   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {target_specialization}")
            print(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {preferred_activities}")
            
            # 3. –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è preferred_activities
            embedding = await self.embeddings_service.create_embedding(preferred_activities)
            if embedding is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è preferred_activities")
                return []
            
            print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å {embedding.shape}")
            
            # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Qdrant
            recommendations = await self.qdrant_service.search_similar_vacancies(
                embedding=embedding,
                target_specialization=target_specialization,
                limit=5
            )
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            return recommendations
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            import traceback
            traceback.print_exc()
            return []
    
    async def _get_session_data(self, session_id: UUID) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç collected_data –∏–∑ —á–∞—Ç-—Å–µ—Å—Å–∏–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            session = await self.chat_repo.get_session(session_id)
            if not session:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º collected_data (—ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict)
            collected_data = getattr(session, 'collected_data', {})
            if not isinstance(collected_data, dict):
                print(f"‚ö†Ô∏è collected_data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(collected_data)}")
                return {}
            
            return collected_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    async def test_services(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        
        # –¢–µ—Å—Ç Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.qdrant_service.test_connection():
            return False
        
        if not self.qdrant_service.check_collection():
            return False
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        test_text = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python"
        embedding = await self.embeddings_service.create_embedding(test_text)
        if embedding is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥")
            return False
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: {embedding.shape}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        test_recommendations = await self.qdrant_service.search_test_query(test_text, embedding)
        if not test_recommendations:
            print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: {len(test_recommendations)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
