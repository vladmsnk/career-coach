"""
–°–µ—Ä–≤–∏—Å –∫–∞—Ä—å–µ—Ä–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yandex GPT
"""
import logging
from typing import Dict, List, Optional
from yandex_cloud_ml_sdk import YCloudML
from tenacity import retry, wait_exponential_jitter, stop_after_attempt, retry_if_exception_type

from app.core.settings import settings
from app.services.vacancies.vacancy_service import VacancyData

logger = logging.getLogger(__name__)

class CareerConsultationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç Yandex GPT"""
    
    def __init__(self, model: str = "yandexgpt"):
        self.model = model
        api_key = settings.yandex_gpt_api_key
        folder_id = settings.yandex_gpt_folder_id
        if not api_key:
            raise ValueError("Yandex GPT API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        if not folder_id:
            raise ValueError("Yandex GPT folder_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        self.sdk = YCloudML(folder_id=folder_id, auth=api_key)
    
    @retry(
        wait=wait_exponential_jitter(initial=2, max=60),
        stop=stop_after_attempt(3),
        retry=retry_if_exception_type((Exception,))
    )
    async def get_career_consultation(
        self, 
        user_data: Dict,
        vacancies: List[VacancyData]
    ) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        
        Args:
            user_data: –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
            vacancies: –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            
        Returns:
            –¢–µ–∫—Å—Ç –∫–∞—Ä—å–µ—Ä–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Yandex GPT
            user_context = self._build_user_context(user_data)
            vacancies_context = self._build_vacancies_context(vacancies)
            
            system_prompt = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ IT-—Å—Ñ–µ—Ä–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—å–µ—Ä–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –µ–º—É –≤–∞–∫–∞–Ω—Å–∏–π."
            user_prompt = self._build_consultation_prompt(user_context, vacancies_context)
            
            logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex GPT ({self.model})")
            
            messages = [
                {"role": "system", "text": system_prompt},
                {"role": "user", "text": user_prompt},
            ]
            
            result = await self.sdk.models.completions(self.model).configure(temperature=0.5).run_async(messages)
            
            consultation = result.alternatives[0].text.strip()
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—å–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–¥–ª–∏–Ω–∞: {len(consultation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            return consultation
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            return self._get_fallback_consultation()
    
    def _build_user_context(self, user_data: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Yandex GPT"""
        context_parts = []
        
        # –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        professional_area = user_data.get('professional_area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        current_position = user_data.get('current_position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        years_experience = user_data.get('years_experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        context_parts.append(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞: {professional_area}")
        context_parts.append(f"–¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {current_position}")
        context_parts.append(f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {years_experience} –ª–µ—Ç")
        
        # –û–ø—ã—Ç –∏ –ø—Ä–æ–µ–∫—Ç—ã
        work_experience_projects = user_data.get('work_experience_projects', '')
        if work_experience_projects:
            context_parts.append(f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã: {work_experience_projects}")
        
        # –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏
        target_area = user_data.get('target_area', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        preferred_activities = user_data.get('preferred_activities', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        position_level_ambitions = user_data.get('position_level_ambitions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        salary_expectations = user_data.get('salary_expectations', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        context_parts.append(f"–ñ–µ–ª–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å: {target_area}")
        context_parts.append(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {preferred_activities}")
        context_parts.append(f"–ê–º–±–∏—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é: {position_level_ambitions}")
        context_parts.append(f"–û–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ: {salary_expectations} —Ä—É–±/–º–µ—Å")
        
        # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
        current_skills = user_data.get('current_skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        tools_experience = user_data.get('tools_experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        soft_skills = user_data.get('soft_skills', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        education = user_data.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        context_parts.append(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏: {current_skills}")
        context_parts.append(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {tools_experience}")
        context_parts.append(f"Soft skills: {soft_skills}")
        context_parts.append(f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education}")
        
        return "\n".join(context_parts)
    
    def _build_vacancies_context(self, vacancies: List[VacancyData]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è Yandex GPT"""
        if not vacancies:
            return "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        vacancies_parts = []
        
        for i, vacancy in enumerate(vacancies, 1):
            vacancy_info = [
                f"–í–∞–∫–∞–Ω—Å–∏—è {i}:",
                f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy.title}",
                f"  –ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company}",
                f"  –û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.job_description[:500]}{'...' if len(vacancy.job_description) > 500 else ''}"
            ]
            vacancies_parts.append("\n".join(vacancy_info))
        
        return "\n\n".join(vacancies_parts)
    
    def _build_consultation_prompt(self, user_context: str, vacancies_context: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç prompt –¥–ª—è Yandex GPT"""
        return f"""
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ–¥–∏ –∫–∞—Ä—å–µ—Ä–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{user_context}

–ü–û–î–•–û–î–Ø–©–ò–ï –í–ê–ö–ê–ù–°–ò–ò:
{vacancies_context}

–ó–ê–î–ê–ù–ò–ï:
–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—å–µ—Ä–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç:

1. **–û—Ü–µ–Ω–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è**: –ö—Ä–∞—Ç–∫–æ –æ—Ü–µ–Ω–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º
2. **–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π**: –ö–∞–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ–æ—Ç–Ω–æ—Å—è—Ç—Å—è —Å —Ü–µ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. **–¢–æ—á–∫–∏ —Ä–æ—Å—Ç–∞**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è (–º–∞–∫—Å–∏–º—É–º 4-5 –ø—É–Ω–∫—Ç–æ–≤)
4. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–ª–∏ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
5. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏**: 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1200 —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω.
"""
    
    def _get_fallback_consultation(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        return """
üéØ **–ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç AI-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞. 

**–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
‚Ä¢ –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ soft skills - –æ–Ω–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ä—è—é—Ç –≤–∞—à –æ–ø—ã—Ç
‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏.
"""

