# Career Coach Project Makefile
# ==================================

# –í–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
ifneq (,$(wildcard ./.env))
    include .env
    export
endif

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT := $(shell pwd)
VENV_DIR := $(PROJECT_ROOT)/venv
VENV_BIN := $(VENV_DIR)/bin
PYTHON := $(VENV_BIN)/python
PIP := $(VENV_BIN)/pip
UVICORN := $(VENV_BIN)/uvicorn
ALEMBIC := $(VENV_BIN)/alembic
PYTEST := $(VENV_BIN)/pytest

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env)
DATABASE_URL ?= postgresql+asyncpg://user:password@localhost:5432/chat_service
SECRET_KEY ?= changeme
ENABLE_VACANCY_RECOMMENDATIONS ?= false
YANDEX_GPT_API_KEY ?= 
YANDEX_GPT_FOLDER_ID ?= 
QDRANT_URL ?= http://localhost:6333
QDRANT_COLLECTION ?= vacancies_tasks

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
BLUE := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
RESET := \033[0m

.PHONY: help install setup backend frontend db-up db-down db-migrate db-reset test test-recommendations clean status logs

# –ü–æ–º–æ—â—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
help:
	@echo "$(BLUE)Career Coach - –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞$(RESET)"
	@echo ""
	@echo "$(GREEN)üöÄ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:$(RESET)"
	@echo "  make backend          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥ API (FastAPI)"
	@echo "  make frontend         - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ UI (React + Vite)"
	@echo "  make dev              - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
	@echo ""
	@echo "$(GREEN)üõ†Ô∏è  –ù–ê–°–¢–†–û–ô–ö–ê –ò –£–°–¢–ê–ù–û–í–ö–ê:$(RESET)"
	@echo "  make install          - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
	@echo "  make setup            - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)"
	@echo ""
	@echo "$(GREEN)üóÉÔ∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–•:$(RESET)"
	@echo "  make db-up            - –ó–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL + Qdrant"
	@echo "  make db-down          - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
	@echo "  make db-migrate       - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  make db-reset         - –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
	@echo ""
	@echo "$(GREEN)üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:$(RESET)"
	@echo "  make test             - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
	@echo "  make test-recommendations - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
	@echo ""
	@echo "$(GREEN)üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:$(RESET)"
	@echo "  make status           - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make logs             - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker"
	@echo "  make clean            - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
	@echo ""

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install:
	@echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@if [ ! -d "$(VENV_DIR)" ]; then \
		echo "$(BLUE)–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(RESET)"; \
		python3 -m venv $(VENV_DIR); \
	fi
	@echo "$(BLUE)–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@$(PIP) install --upgrade pip
	@$(PIP) install -r requirements.txt
	@echo "$(BLUE)–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(RESET)"
	@cd ui && npm install
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

# –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup: install db-up db-migrate load-vacancies
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!$(RESET)"
	@echo "$(BLUE)–ó–∞–ø—É—Å—Ç–∏—Ç–µ:$(RESET)"
	@echo "  make dev              - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  make backend          - —Ç–æ–ª—å–∫–æ –±—ç–∫–µ–Ω–¥"
	@echo "  make frontend         - —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"

# –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞
backend:
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ Backend API –Ω–∞ http://localhost:8000$(RESET)"
	@echo "$(YELLOW)API Docs: http://localhost:8000/docs$(RESET)"
	@export PYTHONPATH="$(PROJECT_ROOT):$$PYTHONPATH" && \
	export DATABASE_URL="$(DATABASE_URL)" && \
	export SECRET_KEY="$(SECRET_KEY)" && \
	export ENABLE_VACANCY_RECOMMENDATIONS="$(ENABLE_VACANCY_RECOMMENDATIONS)" && \
	export QDRANT_URL="$(QDRANT_URL)" && \
	export QDRANT_COLLECTION="$(QDRANT_COLLECTION)" && \
	$(UVICORN) app.main:app --host 127.0.0.1 --port 8000 --reload

# –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞  
frontend:
	@echo "$(BLUE)üé® –ó–∞–ø—É—Å–∫ Frontend UI –Ω–∞ http://localhost:5173$(RESET)"
	@cd ui && npm run dev

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
dev:
	@echo "$(GREEN)üî• –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(RESET)"
	@echo "$(BLUE)Backend: http://localhost:8000$(RESET)"
	@echo "$(BLUE)Frontend: http://localhost:5173$(RESET)"
	@make -j2 backend frontend

# –ó–∞–ø—É—Å–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
db-up:
	@echo "$(BLUE)üóÉÔ∏è  –ó–∞–ø—É—Å–∫ PostgreSQL + Qdrant...$(RESET)"
	@docker-compose up -d
	@echo "$(YELLOW)–ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...$(RESET)"
	@sleep 10
	@echo "$(GREEN)‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω—ã$(RESET)"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
db-down:
	@echo "$(YELLOW)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...$(RESET)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(RESET)"

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
db-migrate:
	@echo "$(BLUE)üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(RESET)"
	@export PYTHONPATH="$(PROJECT_ROOT):$$PYTHONPATH" && \
	export DATABASE_URL="$(DATABASE_URL)" && \
	$(ALEMBIC) upgrade head
	@echo "$(GREEN)‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã$(RESET)"

# –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db-reset:
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!$(RESET)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm && [ "$$confirm" = "y" ]
	@docker-compose down -v
	@docker-compose up -d
	@sleep 10
	@make db-migrate
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞$(RESET)"

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
test:
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(RESET)"
	@export PYTHONPATH="$(PROJECT_ROOT):$$PYTHONPATH" && \
	export DATABASE_URL="$(DATABASE_URL)" && \
	$(PYTEST) tests/ -v
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(RESET)"

# –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
test-recommendations:
	@echo "$(BLUE)üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...$(RESET)"
	@export PYTHONPATH="$(PROJECT_ROOT):$$PYTHONPATH" && \
	export ENABLE_VACANCY_RECOMMENDATIONS="true" && \
	$(PYTHON) scripts/test_recommendations_integration.py
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(RESET)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
status:
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(RESET)"
	@echo ""
	@echo "$(YELLOW)üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:$(RESET)"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
	@echo ""
	@echo "$(YELLOW)üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:$(RESET)"
	@if nc -z localhost 8000 2>/dev/null; then \
		echo "$(GREEN)‚úÖ Backend API (8000): –†–∞–±–æ—Ç–∞–µ—Ç$(RESET)"; \
	else \
		echo "$(RED)‚ùå Backend API (8000): –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"; \
	fi
	@if nc -z localhost 5173 2>/dev/null; then \
		echo "$(GREEN)‚úÖ Frontend UI (5173): –†–∞–±–æ—Ç–∞–µ—Ç$(RESET)"; \
	else \
		echo "$(RED)‚ùå Frontend UI (5173): –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"; \
	fi
	@if nc -z localhost 5432 2>/dev/null; then \
		echo "$(GREEN)‚úÖ PostgreSQL (5432): –†–∞–±–æ—Ç–∞–µ—Ç$(RESET)"; \
	else \
		echo "$(RED)‚ùå PostgreSQL (5432): –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"; \
	fi
	@if curl -s http://localhost:6333/health >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ Qdrant (6333): –†–∞–±–æ—Ç–∞–µ—Ç$(RESET)"; \
	else \
		echo "$(RED)‚ùå Qdrant (6333): –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω$(RESET)"; \
	fi
	@echo ""
	@echo "$(YELLOW)‚öôÔ∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(RESET)"
	@echo "DATABASE_URL: $(DATABASE_URL)"
	@echo "ENABLE_VACANCY_RECOMMENDATIONS: $(ENABLE_VACANCY_RECOMMENDATIONS)"
	@echo "QDRANT_URL: $(QDRANT_URL)"

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs:
	@echo "$(BLUE)üìú –õ–æ–≥–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤:$(RESET)"
	@docker-compose logs --tail=50 -f

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean:
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(RESET)"
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@find . -name "*.pyo" -delete 2>/dev/null || true
	@rm -rf .pytest_cache/ 2>/dev/null || true
	@rm -rf ui/dist/ 2>/dev/null || true
	@rm -rf ui/.vite/ 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
env-example:
	@echo "$(BLUE)üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ .env —Ñ–∞–π–ª–∞...$(RESET)"
	@if [ ! -f .env ]; then \
		echo "# Career Coach Environment Variables" > .env; \
		echo "DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/chat_service" >> .env; \
		echo "SECRET_KEY=changeme" >> .env; \
		echo "ENABLE_VACANCY_RECOMMENDATIONS=false" >> .env; \
 \
		echo "QDRANT_URL=http://localhost:6333" >> .env; \
		echo "QDRANT_COLLECTION=vacancies_tasks" >> .env; \
		echo "$(GREEN)‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω$(RESET)"; \
		echo "$(YELLOW)‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å YANDEX_GPT_API_KEY –∏ YANDEX_GPT_FOLDER_ID –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π$(RESET)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(RESET)"; \
	fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π (—à–∞–≥ 1 - –¥–æ–ª–≥–∏–π, –¥–æ—Ä–æ–≥–æ–π)
generate-embeddings:
	@echo "$(BLUE)ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π...$(RESET)"
	@if [ -z "$(YANDEX_GPT_API_KEY)" ]; then \
		echo "$(RED)‚ùå YANDEX_GPT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!$(RESET)"; \
		exit 1; \
	fi
	@if [ ! -f scored_vacs.pickle ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª scored_vacs.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω!$(RESET)"; \
		exit 1; \
	fi
	@export PYTHONPATH="$(PROJECT_ROOT):$$PYTHONPATH" && \
	$(PYTHON) scripts/generate_embeddings.py
	@echo "$(GREEN)‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã$(RESET)"

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ Qdrant (—à–∞–≥ 2 - –±—ã—Å—Ç—Ä—ã–π)
load-vacancies:
	@echo "$(BLUE)üìä –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ Qdrant...$(RESET)"
	@if [ ! -f vacancies_with_embeddings.pickle ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª vacancies_with_embeddings.pickle –Ω–µ –Ω–∞–π–¥–µ–Ω!$(RESET)"; \
		echo "$(YELLOW)üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make generate-embeddings$(RESET)"; \
		exit 1; \
	fi
	@export PYTHONPATH="$(PROJECT_ROOT):$$PYTHONPATH" && \
	$(PYTHON) scripts/load_to_qdrant.py
	@echo "$(GREEN)‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Qdrant$(RESET)"

# –ü–æ–ª–Ω—ã–π pipeline: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –∑–∞–≥—Ä—É–∑–∫–∞ (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
setup-vacancies: generate-embeddings load-vacancies
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(RESET)"

